// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// SysConfigDataDao is the manager for logic model data accessing and custom defined data operations functions management.
type SysConfigDataDao struct {
	gmvc.M                      // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      sysConfigDataColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB               // DB is the raw underlying database management object.
	Table  string               // Table is the underlying table name of the DAO.
}

// SysConfigDataColumns defines and stores column names for table sys_config_data.
type sysConfigDataColumns struct {
	Id        string // 主键ID
	Title     string // 配置标题
	Code      string // 配置编码
	Value     string // 配置值
	Options   string // 配置项
	ConfigId  string // 配置分组ID
	Type      string // 配置类型
	Status    string // 状态：1正常 2停用
	Sort      string // 排序
	Note      string // 配置说明
	CreatedBy string // 添加人
	CreatedAt string // 添加时间
	UpdatedBy string // 更新人
	UpdatedAt string // 更新时间
}

// NewSysConfigDataDao creates and returns a new DAO object for table data access.
func NewSysConfigDataDao() *SysConfigDataDao {
	columns := sysConfigDataColumns{
		Id:        "id",
		Title:     "title",
		Code:      "code",
		Value:     "value",
		Options:   "options",
		ConfigId:  "config_id",
		Type:      "type",
		Status:    "status",
		Sort:      "sort",
		Note:      "note",
		CreatedBy: "created_by",
		CreatedAt: "created_at",
		UpdatedBy: "updated_by",
		UpdatedAt: "updated_at",
	}
	return &SysConfigDataDao{
		C:     columns,
		M:     g.DB("default").Model("sys_config_data").Safe(),
		DB:    g.DB("default"),
		Table: "sys_config_data",
	}
}
